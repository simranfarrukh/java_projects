package com.farrukh.simran.methods;

import java.util.ArrayList;
import java.util.Arrays;

public class Methods {

	public static void main(String[] args) {
		//1.1	
		int points = getPoints("green");
		
		System.out.println("You scored" + points);

	}
	
	//1.1
	public static int getPoints(String alienColour){
		if (alienColour.equals("green")){
			return 5;
		} 

		if (alienColour.equals("red")){
			return 10;
		} 
				
		if (alienColour.equals("yellow")){
			return 15;
		} 

		return 0;
	}
	
	
	//1.2
	public static long sumOfNumbersUpTo(int endNumber){
		long total = 0;
				
		for (int count = 1; count <= endNumber; count++){
			total += count;
		}
						
		return total;
	}
	
	
	//1.3
	public static void displayTimesTable(int table){
		for (int count = 1; count<= 12; count++){
			System.out.println(count+" x "+table+" = "+(count*table));
		}
	}

	
	//2.1
	public static boolean leapYear(int year) {
		if (year%4 != 0) {
			return false;
		}
				
		if (year%400 == 0) {
			return true;
		}
				
		if (year%100 == 0) {
			return false;
		}
				
		return true;
	}

	
	//2.2
	public static boolean arrayContains(String[] array, String string) {
		
		for (String element : array) {
			if (element.equals(string)) {
				return true;
			}
		}
					
			return false;
		}

	
	//2.3
	public static int arrayFrequency(int[] array, int number ) {
		int count = 0;
			
		for (int element : array) {
			if (element == number) {
				count ++;
			}
		}
				
		return count;
	}

	
	//2.4
	public int maxNumber(int[] array) {
		Arrays.sort(array);
		int highestIndex = array.length-1;
		int maximum = array[highestIndex];
		return maximum;
	}

	
	//2.5
	public static int[] extractEvenArray(int[] array) {
		ArrayList<Integer> evens = new ArrayList<Integer>();
				
		for (int number : array) {
			if (number%2 == 0) {
				evens.add(number);
			}
		}
			
		// convert ArrayList<Integer> to int[] then return int[]
		return evens.stream().mapToInt(i->i).toArray();  
	}

	
	//2.6
	public static String[] reverseStringArray(String[] array) {
		int length = array.length;
		String[] reversed = new String[length];
			
		for (int index = 0; index < length; index++) {
			int reversedIndex = length - 1 - index;
			reversed[reversedIndex] = array[index];
		}
			
		return reversed;
	}

	
	//2.7
	public static boolean isAnagram(String string1, String string2) {
		char[] string1Array = string1.toCharArray();
		char[] string2Array = string2.toCharArray();
			
		Arrays.sort(string1Array);
		Arrays.sort(string2Array);
			
		string1 = new String(string1Array);
		string2 = new String(string2Array);
			
		return string1.equals(string2);
	}
	
	
	//2.8
	public double medianNumber(double[] numbers) {
			Arrays.sort(numbers);
			
			int middleIndex = numbers.length / 2;
			
			if (numbers.length%2 == 0) {
				return (numbers[middleIndex]+numbers[middleIndex-1]) / 2;
			} else {
				return numbers[middleIndex];
			}
	
		}


	
}
